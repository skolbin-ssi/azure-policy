apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sazurev1windowsblockcontaineradmin
spec:
  crd:
    spec:
      names:
        kind: K8sAzureV1WindowsBlockContainerAdmin
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            excludedImages:
              type: array
              items:
                type: string
              description: >-
                Any container that uses an image that matches an entry in this list will be excluded
                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)
                in order to avoid unexpectedly excluding images from an untrusted repository.
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sazurev1windowsblockcontaineradmin

        import data.lib.exclude_container_image.is_excluded

        # following conditions will violate the rule
        # 1. if runAsUserName is specified, it is "ContainerAdministrator"
        # 2. if runAsUserName is not specified, runAsNonRoot is not true and the image is not nano-server-based
        #    (nano-server-based image will run as ContainerUser by default)

        violation[{"msg": msg}] {
            isWindowsPod
            container := input_containers[_]
            not is_excluded(container)
            use_container_admin(container)
            msg := sprintf("Container <%v> has ContainerAdministrator runAsUsername.", [container.name])
        }

        use_container_admin(c) {
            username := get_username(c)
            username == "ContainerAdministrator"
        }

        # runAsUserName is not set for both container and pod, runAsNonRoot is not true
        # for images except nano server, the username is regarded as ContainerAdministrator
        use_container_admin(c) {
          not c.securityContext.windowsOptions.runAsUserName
          not input.review.object.spec.securityContext.windowsOptions.runAsUserName
          not run_as_non_root(c)
          not nano_server_image(c)
        }

        # runAsNonRoot is true for container
        run_as_non_root(c) {
          c.securityContext.runAsNonRoot
        }

        # runAsNonRoot is null for contianer, true for pod
        run_as_non_root(c) {
          not c.securityContext.runAsNonRoot # c.securityContext.runAsNonRoot is null or false
          not (c.securityContext.runAsNonRoot == false)
          input.review.object.spec.securityContext.runAsNonRoot
        }

        nano_server_image(c) {
          not is_null(c.image)
          regex.match("mcr.microsoft.com/windows/nanoserver", c.image)
        }

        nano_server_image(c) {
          not is_null(c.image)
          regex.match("mcr.microsoft.com/windows/nanoserver:*", c.image)
        }

        # returns runAsUserName if set for container
        get_username(c) = out {
            out := c.securityContext.windowsOptions.runAsUserName
        }

        # returns runAsUserName if NOT set for container but IS set for pod
        get_username(c) = out {
            not c.securityContext.windowsOptions.runAsUserName
            out = input.review.object.spec.securityContext.windowsOptions.runAsUserName
        }

        isWindowsPod {
            ns := input.review.object.spec.nodeSelector
            ns["kubernetes.io/os"] == "windows"
        }

        input_containers[c] {
            c := input.review.object.spec.containers[_]
        }

        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
        }
      libs:
        - |
          package lib.exclude_container_image
          is_excluded(container) {
              exclude_images := object.get(object.get(input, "parameters", {}), "excludedImages", [])
              img := container.image
              exclusion := exclude_images[_]
              _matches_exclusion(img, exclusion)
          }
          _matches_exclusion(img, exclusion) {
              not endswith(exclusion, "*")
              exclusion == img
          }
          _matches_exclusion(img, exclusion) {
              endswith(exclusion, "*")
              prefix := trim_suffix(exclusion, "*")
              startswith(img, prefix)
          }


apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sazurev3hostfilesystem
spec:
  crd:
    spec:
      names:
        kind: K8sAzureV3HostFilesystem
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            allowedHostPaths:
              type: array
              items:
                type: object
                properties:
                  readOnly:
                    type: boolean
                  pathPrefix:
                    type: string
            excludedContainers:
              type: array
              items:
                type: string
            excludedImages:
              description: >-
                Any container that uses an image that matches an entry in this list will be excluded
                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)
                in order to avoid unexpectedly excluding images from an untrusted repository.
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sazurev3hostfilesystem

        import data.lib.exclude_container_image.is_excluded

        # The following scenario will be viewed as non-compliant:
        ## exist hostPath volume mounted on container not in the allowed list
        ## hostPath is set readonly but mounted as writable

        # disallowed due to not in allowed paths
        violation[{"msg": msg, "details": {}}] {
            not input.review.object.spec.nodeSelector["kubernetes.io/os"] == "windows"
            volume := input_hostpath_volumes[_]
            allowedPaths := get_allowed_paths(input)
            not input_hostpath_allowed(allowedPaths, volume)
            msg := sprintf("HostPath volume %v is not allowed, pod: %v. Allowed path: %v", [volume, input.review.object.metadata.name, allowedPaths])
        }
        
        # disallowed due to mounted as writeable
        violation[{"msg": msg, "details": {}}] {
            not input.review.object.spec.nodeSelector["kubernetes.io/os"] == "windows"
            volume := input_hostpath_volumes[_]
            allowedPaths := get_allowed_paths(input)
            allowedHostPath := allowedPaths[_]
            allowedHostPath.readOnly
            path_matches(allowedHostPath.pathPrefix, volume.hostPath.path)
            writeable_input_volume_mounts(volume.name)
            msg := sprintf("HostPath volume %v does not meet the readonly requirement, pod: %v. Allowed path: %v", [volume, input.review.object.metadata.name, allowedPaths])
        }

        get_allowed_paths(arg) = out {
            not arg.parameters
            out = []
        }
        get_allowed_paths(arg) = out {
            not arg.parameters.allowedHostPaths
            out = []
        }
        get_allowed_paths(arg) = out {
            out = arg.parameters.allowedHostPaths
        }

        input_hostpath_allowed(allowedPaths, volume) {
            allowedHostPath := allowedPaths[_]
            path_matches(allowedHostPath.pathPrefix, volume.hostPath.path)
        }

        writeable_input_volume_mounts(volume_name) {
            container := input_containers[_]
            not is_excluded(container)
            not input_container_excluded(container.name)
            mount := container.volumeMounts[_]
            mount.name == volume_name
            not mount.readOnly
        }

        # This allows "/foo", "/foo/", "/foo/bar" etc., but
        # disallows "/fool", "/etc/foo" etc.
        path_matches(prefix, path) {
            a := path_array(prefix)
            b := path_array(path)
            prefix_matches(a, b)
        }
        path_array(p) = out {
            p != "/"
            out := split(trim(p, "/"), "/")
        }
        # This handles the special case for "/", since
        # split(trim("/", "/"), "/") == [""]
        path_array("/") = []

        prefix_matches(a, b) {
            count(a) <= count(b)
            not any_not_equal_upto(a, b, count(a))
        }

        any_not_equal_upto(a, b, n) {
            a[i] != b[i]
            i < n
        }

        input_hostpath_volumes[v] {
            v := mounted_volumes[_]
            has_field(v, "hostPath")
        }

        mounted_volumes[volumes] {
            container := input_containers[_]
            not is_excluded(container)
            not input_container_excluded(container.name)
            volumeNames := {x | x := container.volumeMounts[_].name}
            volumes := {x | x := input.review.object.spec.volumes[_]; x.name == volumeNames[_]}[_]
        }

        # has_field returns whether an object has a field
        has_field(object, field) = true {
            object[field]
        }
        input_containers[c] {
            c := input.review.object.spec.containers[_]
        }

        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
        }

        input_container_excluded(field) {
            field == input.parameters.excludedContainers[_]
        }
      libs:
        - |
          package lib.exclude_container_image
          is_excluded(container) {
              exclude_images := object.get(object.get(input, "parameters", {}), "excludedImages", [])
              img := container.image
              exclusion := exclude_images[_]
              _matches_exclusion(img, exclusion)
          }
          _matches_exclusion(img, exclusion) {
              not endswith(exclusion, "*")
              exclusion == img
          }
          _matches_exclusion(img, exclusion) {
              endswith(exclusion, "*")
              prefix := trim_suffix(exclusion, "*")
              startswith(img, prefix)
          }

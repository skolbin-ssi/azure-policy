apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sazurev1ingresshttpsonly
spec:
  crd:
    spec:
      names:
        kind: K8sAzureV1IngressHttpsOnly
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sazurev1ingresshttpsonly

        # ALLOWED HTTPS-ONLY SCENARIO
        ## Azure Gateway Ingress Controller
        ## [ tls spec exists ]
        ## [ annotation appgw-ssl-certificate exist ]
        ### Different from nginx ingress controller, when annotation ssl-redirect is false or missing, http will be blocked

        ## Nginx Ingress Controller
        ## [ force-ssl-redirect=true ] + [ tls spec ]
        ## [ force-ssl-redirect=true ] + [ annotation auth-tls-secret exist ]
        ## [ force-ssl-redirect=true ] + [ ssl-passthrough=true ]
        ## [ ssl-redirect=true ] + [ declare host for rules ] can also view as [ force-ssl-redirect=true ]
        ### If the cert provided is not valid, ssl-redirect will apply cert created by nginx and allow both http (not redirect) and https access. Thus enforce-ssl-redirect is requisite for nginx ingress controller

        ## Unknown Ingress Controller
        ## All allowed

        violation[{"msg": msg}] {
          input.review.kind.kind == "Ingress"
          re_match("^(extensions|networking.k8s.io)$", input.review.kind.group)
          violate_allow_http[{"msg": msg}]
        }

        # Azure Gateway Ingress Controller Violation
        violate_allow_http[{"msg": msg}] {
          ingress := input.review.object
          ingress.metadata.annotations["kubernetes.io/ingress.class"] == "azure/application-gateway"
          not complaint_agic_cases(ingress)
          msg := sprintf("Ingress should allow https only. tls configuration is required for %v", [ingress.metadata.name])
        }

        # Nginx Ingress Controller Violation
        violate_allow_http[{"msg": msg}] {
          ingress := input.review.object
          isNginxController(ingress)
          not complaint_nginx_cases(ingress)
          msg := sprintf("Ingress should allow https only. tls configuration and annotation nginx.ingress.kubernetes.io/force-ssl-redirect=true are required for %v", [ingress.metadata.name])
        }

        # check if Nginx Ingress Controller
        isNginxController(ingress) {
          not ingress.spec.ingressClassName
          ingress.metadata.annotations["kubernetes.io/ingress.class"] == "nginx"
        }

        isNginxController(ingress) {
          ingress.spec.ingressClassName == "nginx"
        }

        complaint_agic_cases(ingress) {
          count(ingress.spec.tls) > 0
        }

        complaint_agic_cases(ingress) {
          ingress.metadata.annotations["appgw.ingress.kubernetes.io/appgw-ssl-certificate"]
        }

        complaint_nginx_cases(ingress) {
          valid_nginx_ssl(ingress)
          count(ingress.spec.tls) > 0
        }

        complaint_nginx_cases(ingress) {
          valid_nginx_ssl(ingress)
          ingress.metadata.annotations["nginx.ingress.kubernetes.io/auth-tls-secret"]
        }

        complaint_nginx_cases(ingress) {
          valid_nginx_ssl(ingress)
          ingress.metadata.annotations["nginx.ingress.kubernetes.io/ssl-passthrough"] == "true"
        }

        valid_nginx_ssl(ingress) {
          ingress.metadata.annotations["nginx.ingress.kubernetes.io/force-ssl-redirect"] == "true"
        }

        valid_nginx_ssl(ingress) {
          not ingress.metadata.annotations["nginx.ingress.kubernetes.io/ssl-redirect"] == "false"
          
          with_host := [good | rule := ingress.spec.rules[_]; good := rule.host]
          count(with_host) == count(ingress.spec.rules)
        }

apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sazurev3hostnetworkingports
spec:
  crd:
    spec:
      names:
        kind: K8sAzureV3HostNetworkingPorts
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            allowHostNetwork:
              type: boolean
            minPort:
              type: integer
            maxPort:
              type: integer
            excludedContainers:
              type: array
              items:
                type: string
            excludedImages:
              description: >-
                Any container that uses an image that matches an entry in this list will be excluded
                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)
                in order to avoid unexpectedly excluding images from an untrusted repository.
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sazurev3hostnetworkingports

        import data.lib.exclude_container_image.is_excluded

        violation[{"msg": msg, "details": {}}] {
            not input.review.object.spec.nodeSelector["kubernetes.io/os"] == "windows"
            container := input_containers[_]
            not input_container_excluded(container.name)
            not is_excluded(container)
            input_share_hostnetwork(container)
            msg := sprintf("The specified hostNetwork and hostPort are not allowed, pod: %v, container: %v. Allowed values: %v", [input.review.object.metadata.name, container.name, input.parameters])
        }

        input_share_hostnetwork(container) {
            not input.parameters.allowHostNetwork
            input.review.object.spec.hostNetwork
        }

        input_share_hostnetwork(container) {
            hostPort := container.ports[_].hostPort
            hostPort < input.parameters.minPort
        }

        input_share_hostnetwork(container) {
            hostPort := container.ports[_].hostPort
            hostPort > input.parameters.maxPort
        }

        input_containers[c] {
            c := input.review.object.spec.containers[_]
        }

        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
        }

        input_containers[c] {
          c := input.review.object.spec.ephemeralContainers[_]
        }

        input_container_excluded(field) {
            field == input.parameters.excludedContainers[_]
        }
      libs:
        - |
          package lib.exclude_container_image
          is_excluded(container) {
              exclude_images := object.get(object.get(input, "parameters", {}), "excludedImages", [])
              img := container.image
              exclusion := exclude_images[_]
              _matches_exclusion(img, exclusion)
          }
          _matches_exclusion(img, exclusion) {
              not endswith(exclusion, "*")
              exclusion == img
          }
          _matches_exclusion(img, exclusion) {
              endswith(exclusion, "*")
              prefix := trim_suffix(exclusion, "*")
              startswith(img, prefix)
          }
